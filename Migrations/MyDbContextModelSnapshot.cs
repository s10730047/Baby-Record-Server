// <auto-generated />
using System;
using BabyRecords_Server.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BabyRecords_Server.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BabyRecords_Server.Entities.Baby_Area_Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BabyID")
                        .HasColumnType("int");

                    b.Property<string>("Event")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BabyID");

                    b.ToTable("babyArea");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Baby_FaceCover_Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BabyID")
                        .HasColumnType("int");

                    b.Property<string>("Event")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BabyID");

                    b.ToTable("babyFaceCover");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Baby_Record_Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BabyID")
                        .HasColumnType("int");

                    b.Property<int>("babyTemp")
                        .HasColumnType("int");

                    b.Property<int>("babyTempWay")
                        .HasColumnType("int");

                    b.Property<int>("diaper")
                        .HasColumnType("int");

                    b.Property<int>("feeding")
                        .HasColumnType("int");

                    b.Property<float>("head")
                        .HasColumnType("real");

                    b.Property<int>("healthWay")
                        .HasColumnType("int");

                    b.Property<float>("height")
                        .HasColumnType("real");

                    b.Property<int>("humidity")
                        .HasColumnType("int");

                    b.Property<int>("milkMl")
                        .HasColumnType("int");

                    b.Property<int>("milkingMl")
                        .HasColumnType("int");

                    b.Property<int>("recordClass")
                        .HasColumnType("int");

                    b.Property<string>("remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sleep")
                        .HasColumnType("int");

                    b.Property<int>("spoon")
                        .HasColumnType("int");

                    b.Property<int>("temp")
                        .HasColumnType("int");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.Property<float>("weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BabyID");

                    b.ToTable("babyRecord");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Baby_info_Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UsersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("babyBirthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("babyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("familGroupID")
                        .HasColumnType("int");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UsersID");

                    b.HasIndex("familGroupID");

                    b.ToTable("BabyInfo");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Family_Group_Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("familyGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("familyGroup");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Family_Group_Member_Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("authority")
                        .HasColumnType("int");

                    b.Property<int>("familyGroupID")
                        .HasColumnType("int");

                    b.Property<int>("usersID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("familyGroupID");

                    b.HasIndex("usersID");

                    b.ToTable("familyGroupMember");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.User_Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("salt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.temp_and_humidity_Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsersID")
                        .HasColumnType("int");

                    b.Property<int>("humidity")
                        .HasColumnType("int");

                    b.Property<int>("temp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsersID");

                    b.ToTable("TempAndHumidity");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Baby_Area_Entity", b =>
                {
                    b.HasOne("BabyRecords_Server.Entities.Baby_info_Entity", "Baby")
                        .WithMany("babyArea")
                        .HasForeignKey("BabyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baby");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Baby_FaceCover_Entity", b =>
                {
                    b.HasOne("BabyRecords_Server.Entities.Baby_info_Entity", "Baby")
                        .WithMany("babyFaceCover")
                        .HasForeignKey("BabyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baby");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Baby_Record_Entity", b =>
                {
                    b.HasOne("BabyRecords_Server.Entities.Baby_info_Entity", "Baby")
                        .WithMany("babyrecord")
                        .HasForeignKey("BabyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baby");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Baby_info_Entity", b =>
                {
                    b.HasOne("BabyRecords_Server.Entities.User_Entity", "Users")
                        .WithMany("BabyInfo")
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyRecords_Server.Entities.Family_Group_Entity", "familyGroup")
                        .WithMany("Baby")
                        .HasForeignKey("familGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("familyGroup");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Family_Group_Member_Entity", b =>
                {
                    b.HasOne("BabyRecords_Server.Entities.Family_Group_Entity", "familyGroup")
                        .WithMany("Family_Group_Member")
                        .HasForeignKey("familyGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyRecords_Server.Entities.User_Entity", "users")
                        .WithMany("Family_Group_Member")
                        .HasForeignKey("usersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("familyGroup");

                    b.Navigation("users");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.temp_and_humidity_Entity", b =>
                {
                    b.HasOne("BabyRecords_Server.Entities.User_Entity", "Users")
                        .WithMany("Temp_And_Humidities")
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Baby_info_Entity", b =>
                {
                    b.Navigation("babyArea");

                    b.Navigation("babyFaceCover");

                    b.Navigation("babyrecord");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.Family_Group_Entity", b =>
                {
                    b.Navigation("Baby");

                    b.Navigation("Family_Group_Member");
                });

            modelBuilder.Entity("BabyRecords_Server.Entities.User_Entity", b =>
                {
                    b.Navigation("BabyInfo");

                    b.Navigation("Family_Group_Member");

                    b.Navigation("Temp_And_Humidities");
                });
#pragma warning restore 612, 618
        }
    }
}
